/// # Althread Grammar
/// This file defines the grammar for the Althread programming language,

program = _{ SOI ~ blocks* ~ EOI }

/// ## Program Structure
/// The main building blocks of an Althread program are:
/// - **Main Block**: The entry point of the program.
/// - **Shared Block**: Declares global variables accessible across different parts of the program.
/// - **Condition Block**: Monitors conditions at each atomic step (e.g., always, never, eventually).
/// - **Program Block**: Encapsulates code that runs concurrently in parallel processes.
blocks = _{ main_block | global_block | condition_block | program_block }

global_block    = { GLOBAL_KW ~ code_block }
condition_block = { condition_keywords ~ expression_block }
program_block   = { PROGRAM_KW ~ identifier ~ arg_list ~ code_block }
main_block      = { MAIN_KW ~ code_block }

code_block           = { "{" ~ statement* ~ "}" }
expression_block     = { "{" ~ expression_statement* ~ "}" }
expression_statement = { expression ~ ";" }

condition_keywords = _{ ALWAYS_KW | NEVER_KW }

/// ## Statements
/// Statements are the executable instructions in the language.
/// They include assignments, declarations, expressions, print statements,
/// function calls, and control flow structures.

statement = {
    assignment_statement
  | declaration_statement
  | channel_declaration_statement
  | run_statement
  | send_statement
  | wait_statement
  | atomic_statement
  | if_control
  | for_control
  | loop_control
  | while_control
  | call_statement
  | code_block
  | break_loop_statement
}

break_loop_statement = { (BREAK_KW | CONTINUE_KW) ~ identifier? ~ ";" }
assignment_statement  = _{ assignment ~ ";" }
declaration_statement = _{ declaration ~ ";" }
wait_statement        =  { WAIT_KW ~ (
      waiting_block 
    | waiting_block_case) }
atomic_statement        =  { (ATOMIC_KW | "!") ~ statement }
call_statement        = _{ fn_call ~ ";" }
run_statement         = _{ run_call ~ ";" }
send_statement         = _{ send_call ~ ";" }
channel_declaration_statement = _{ channel_declaration ~ ";" }

fn_call  = { object_identifier ~ tuple_expression }
run_call = { RUN_KW ~ identifier ~ tuple_expression }
send_call = { SEND_KW ~ object_identifier ~ tuple_expression }
channel_declaration = { 
    CHANNEL_KW ~ 
    object_identifier ~ 
    "<"? ~
    type_list ~ 
    ">"? ~
    object_identifier }

type_list = { "(" ~ datatype ~ ("," ~ datatype)* ~ ")" }
pattern_list = { "(" ~ pattern ~ ("," ~ pattern)* ~ ")" }
arg_list = { 
  ( "(" ~ ")") 
  | ("(" ~ (identifier ~ ":" ~ datatype) ~ ("," ~ identifier ~ ":" ~ datatype)* ~ ")" )
}
pattern = { identifier | literal }

/// ### Assignments
/// Assignments assign values to variables.
/// - **Unary Assignments**: Increment or decrement a variable (e.g., a++).
/// - **Binary Assignments**: Assign the result of an expression to a variable (e.g., a = b + c).
assignment = { binary_assignment }

side_effect_expression    = { run_call | fn_call | expression | ("[" ~ range_expression ~ "]") }

binary_assignment          = { 
    identifier ~ 
    binary_assignment_operator ~ 
    side_effect_expression }
binary_assignment_operator = { ASSIGN_OP | ADD_ASSIGN_OP | SUB_ASSIGN_OP | MUL_ASSIGN_OP | DIV_ASSIGN_OP | MOD_ASSIGN_OP }

/// ### Declarations
/// Declarations introduce new variables, which can be mutable (let) or immutable (const).
declaration         = { declaration_keyword ~ identifier ~ (":" ~ datatype)? ~ ("=" ~ side_effect_expression)? }
declaration_keyword = { LET_KW | CONST_KW }

receive_expression = { RECEIVE_KW ~ object_identifier? ~ pattern_list ~ ("=>" ~ statement)? }

/// ### Expressions
/// Expressions evaluate values based on arithmetic and logical operations, following standard precedence rules.
expression = {
    binary_expression
  | unary_expression
  | primary_expression
}

tuple_expression = {
 ("(" ~ ")") | ("(" ~ expression ~ ("," ~ expression)* ~ ")")
}
range_expression = {
	(expression ~ LIST_OP ~ expression)
}

primary_expression = _{ literal | identifier | "(" ~ expression ~ ")" }

unary_expression = _{ unary_operator? ~ primary_expression }
unary_operator   =  { POS_OP | NEG_OP | NOT_OP }

binary_expression   = _{ unary_expression ~ (binary_operator ~ unary_expression)* }
binary_operator     = _{ or_operator | and_operator | equality_operator | comparison_operator | term_operator | factor_operator }
or_operator         =  { OR_OP }
and_operator        =  { AND_OP }
equality_operator   =  { EQ_OP | NE_OP }
comparison_operator =  { LT_OP | GT_OP | LE_OP | GE_OP }
term_operator       =  { ADD_OP | SUB_OP }
factor_operator     =  { MUL_OP | DIV_OP | MOD_OP }

waiting_block = {
    (SEQ_KW | FIRST_KW) ~ "{" ~ waiting_block_case* ~ "}"
}
waiting_block_case       = { 
   (receive_expression | expression)
   ~ (";" | ("=>" ~ statement)) }

/// ### Control Flow
/// Control flow structures include conditional execution and loops.

if_control    = { IF_KW ~ expression ~ code_block ~ (ELSE_KW ~ (if_control | code_block))? }
while_control = { WHILE_KW ~ expression ~ code_block }
loop_control = { LOOP_KW ~ statement }
for_control = { FOR_KW ~ identifier ~ "in" ~ list_expression ~ statement }

list_expression = _{ (range_expression | expression) }
/// ## Tokens
/// This section defines the keywords, operators, datatypes, and other tokens used in Althread.

/// ### Keywords
/// Keywords define the core constructs of the language.
KEYWORDS = _{
    MAIN_KW
  | GLOBAL_KW
  | PROGRAM_KW
  | ALWAYS_KW
  | NEVER_KW
  | RUN_KW
  | LET_KW
  | CONST_KW
  | IF_KW
  | ELSE_KW
  | WHILE_KW
  | BOOL
  | INT_TYPE
  | FLOAT_TYPE
  | STR_TYPE
  | VOID_TYPE
}

MAIN_KW    = _{ "main" }
GLOBAL_KW  = _{ "shared" }
PROGRAM_KW = _{ "program" }
WAIT_KW    = _{ "wait" }
ALWAYS_KW  =  { "always" }
NEVER_KW   =  { "never" }
RUN_KW     = _{ "run" }

FIRST_KW = { "first" }
SEQ_KW   = { "seq" }

LET_KW   = { "let" }
CONST_KW = { "const" }

IF_KW    = _{ "if" }
ELSE_KW  = _{ "else" }
WHILE_KW = _{ "while" }
FOR_KW = _{ "for" }
LOOP_KW = _{ "loop" }
BREAK_KW = { "break" }
CONTINUE_KW = { "continue" }

SEND_KW = _{ "send" }
RECEIVE_KW = _{ "receive" }
CHANNEL_KW = _{ "channel" }

TRUE_KW  = _{ "true" }
FALSE_KW = _{ "false" }
NULL_KW  = _{ "null" }

ATOMIC_KW = _{ "atomic" }

/// ### Operators
/// Operators are used for arithmetic, logical operations, and assignments.
POS_OP = { "+" }
NEG_OP = { "-" }
NOT_OP = { "!" }

ADD_OP = { "+" }
SUB_OP = { "-" }
MUL_OP = { "*" }
DIV_OP = { "/" }
MOD_OP = { "%" }

EQ_OP  = { "==" }
NE_OP  = { "!=" }
LT_OP  = { "<" }
GT_OP  = { ">" }
LE_OP  = { "<=" }
GE_OP  = { ">=" }
AND_OP = { "&&" }
OR_OP  = { "||" }

LIST_OP = _{ ".." }

ASSIGN_OP     = { "=" }
ADD_ASSIGN_OP = { "+=" }
SUB_ASSIGN_OP = { "-=" }
MUL_ASSIGN_OP = { "*=" }
DIV_ASSIGN_OP = { "/=" }
MOD_ASSIGN_OP = { "%=" }
OR_ASSIGN_OP  = { "|=" }

/// ### Datatypes
/// Datatypes supported in Althread include boolean, integer, float, string, and void.
datatype   = { BOOL_TYPE | INT_TYPE | FLOAT_TYPE | STR_TYPE | VOID_TYPE | LIST_TYPE | PROCESS_TYPE }
BOOL_TYPE  = { "bool" }
INT_TYPE   = { "int" }
FLOAT_TYPE = { "float" }
STR_TYPE   = { "string" }
VOID_TYPE  = { "void" }
PROCESS_TYPE = { "proc" ~ "(" ~ identifier ~ ")" }
LIST_TYPE  = { "list" ~ "(" ~ datatype ~ ")" }

/// ### Literals
/// Include literals such as booleans, integers, floats, strings, and null.
literal =  { BOOL | FLOAT | INT | STR | NULL }
BOOL    = @{ TRUE_KW | FALSE_KW }
INT     = @{ ASCII_DIGIT+ }
FLOAT   = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
STR     = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
NULL    = @{ NULL_KW }

/// ### Identifiers
/// Identifiers are used for naming variables, functions, and other constructs.
identifier        = { IDENT }
object_identifier = { (IDENT ~ "." ~ object_identifier) | IDENT }

reserved_keywords = { (KEYWORDS | datatype) ~ !IDENT_CHAR }

IDENT      = @{ !reserved_keywords ~ ASCII_ALPHA ~ IDENT_CHAR* }
IDENT_CHAR = _{ ASCII_ALPHANUMERIC | "_" }

/// ## Whitespace and Comments
/// Whitespace and comments are ignored by the parser.
WHITESPACE = _{ " " | "\t" | NEWLINE }
NEWLINE    = _{ "\n" | "\r" | "\r\n" }

COMMENT        = _{ INLINE_COMMENT | BLOCK_COMMENT }
INLINE_COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* }
BLOCK_COMMENT  = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
